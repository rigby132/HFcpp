/**
 * @file boys.hpp
 * @author Deniz GÃ¼ven
 * @brief Implements the Boys-function.
 * @version 1.0
 * @date 2022-05-27
 *
 * @copyright Copyright (c) 2022
 *
 */

#pragma once

#include <array>
#include <assert.h>
#include <cmath>
#include <math.h>

#include <iostream>

namespace hf {

/**
 * @brief The boys function of order n calculated by down/upward recursion.
 *
 * @tparam FLOAT The floating point type to use.
 * @param n The order of the function.
 * @param x The x coordinate to evaluate the function at.
 * @param fn The order of the already evaluated boys function.
 * @param fx The boys function value at x of order fn.
 * @return Value of the boys function.
 */
template <typename FLOAT = double> FLOAT boys(const int n, const FLOAT x, int fn, FLOAT fx)
{
    assert(n >= 0);
    assert(x >= 0);
    assert(fn >= 0);
    assert(fx <= 1 / (2 * fn + 1));

    // Downward recursion.
    while (fn > n) {
        fn--;
        fx = (2 * x * fx + std::exp(-x)) / (2 * fn + 1);
    }

    // Upward recursion.
    while (fn < n) {
        assert(x > 0);
        fx = ((2 * fn + 1) * fx - std::exp(-x)) / (2 * x);
        fn++;
    }

    return fx;
}

/**
 * @brief Precomputed values from 0 to 19.4 in 0.1 steps of the boys function order 20.
 */
constexpr std::array<double, 195> BOYS_20_VALUES { 0.02439024390243902524, 0.02217231094478619782,
    0.02015646665055877487, 0.01832426407428708326, 0.01665894294944327350, 0.01514527523069400528,
    0.01376942480082254429, 0.01251882004161709167, 0.01138203808760948968, 0.01034869969012819184,
    0.00940937371771591834, 0.00855549040847624481, 0.00777926257119075301, 0.00707361400584752970,
    0.00643211448123182008, 0.00584892066807594056, 0.00531872248151516423, 0.00483669433676529523,
    0.00439845086749311460, 0.00400000669771804519, 0.00363773989564746209, 0.00330835877195922046,
    0.00300887171602093198, 0.00273655979166481265, 0.00248895183968139613, 0.00226380185739294285,
    0.00205906844673378088, 0.00187289614139621590, 0.00170359844097483473, 0.00154964239582075980,
    0.00140963460064729936, 0.00128230846794264298, 0.00116651266406482719, 0.00106120060162882943,
    0.00096542089154513398, 0.00087830866692393454, 0.00079907769910150046, 0.00072701323334980474,
    0.00066146547846501931, 0.00060184369045652227, 0.00054761079603146939, 0.00049827850654152314,
    0.00045340287757409471, 0.00041258027347224025, 0.00037544369979322607, 0.00034165947010016563,
    0.00031092417655542584, 0.00028296193657713895, 0.00025752189035695757, 0.00023437592634166697,
    0.00021331661387467211, 0.00019415532409513159, 0.00017672052192012016, 0.00016085621350468853,
    0.00014642053500052045, 0.00013328446972922750, 0.00012133068206315684, 0.00011045245737573805,
    0.00010055273839476216, 0.00009154324917450944, 0.00008334369870445827, 0.00007588105690082012,
    0.00006908889638905440, 0.00006290679408692600, 0.00005727978714411918, 0.00005215787829093370,
    0.00004749558609974725, 0.00004325153607286937, 0.00003938808884291551, 0.00003587100211031803,
    0.00003266912325017198, 0.00002975410980011986, 0.00002710017529497206, 0.00002468385814457478,
    0.00002248381146119346, 0.00002048061193329814, 0.00001865658601587194, 0.00001699565186479871,
    0.00001548317558596577, 0.00001410584049975571, 0.00001285152823978379, 0.00001170921061215264,
    0.00001066885123912155, 0.00000972131609982127, 0.00000885829216129554, 0.00000807221336645722,
    0.00000735619331217817, 0.00000670396401129808, 0.00000610982018739093, 0.00000556856860117089,
    0.00000507548195291070, 0.00000462625694659693, 0.00000421697613913861, 0.00000384407323211881,
    0.00000350430149464485, 0.00000319470503409578, 0.00000291259265724138, 0.00000265551408755021,
    0.00000242123832572658, 0.00000220773395981146, 0.00000201315124872499, 0.00000183580581907892,
    0.00000167416382958921, 0.00000152682847060585, 0.00000139252767826683, 0.00000127010295368512,
    0.00000115849918749186, 0.00000105675539907269, 0.00000096399630803252, 0.00000087942466287788,
    0.00000080231425868532, 0.00000073200358168886, 0.00000066789002432704, 0.00000060942461938691,
    0.00000055610724652164, 0.00000050748226863465, 0.00000046313455945911, 0.00000042268588715089,
    0.00000038579162188569, 0.00000035213773833791, 0.00000032143808654358, 0.00000029343190703827,
    0.00000026788156833260, 0.00000024457050676444, 0.00000022330135056404, 0.00000020389421160389,
    0.00000018618512979196, 0.00000017002465642186, 0.00000015527656402234, 0.00000014181667137122,
    0.00000012953177335592, 0.00000011831866629110, 0.00000010808326014765, 0.00000009873976991390,
    0.00000009020997900977, 0.00000008242256830897, 0.00000007531250490342, 0.00000006882048527007,
    0.00000006289242797924, 0.00000005747901151947, 0.00000005253525321047, 0.00000004802012553679,
    0.00000004389620656321, 0.00000004012936139207, 0.00000003668845189466, 0.00000003354507219685,
    0.00000003067330762292, 0.00000002804951501175, 0.00000002565212249797, 0.00000002346144702911,
    0.00000002145952803939, 0.00000001962997584378, 0.00000001795783344415, 0.00000001642945055341,
    0.00000001503236875649, 0.00000001375521681514, 0.00000001258761521862, 0.00000001152008915921,
    0.00000001054398918580, 0.00000000965141885399, 0.00000000883516875381, 0.00000000808865634983,
    0.00000000740587111852, 0.00000000678132451464, 0.00000000621000433948, 0.00000000568733312117,
    0.00000000520913015319, 0.00000000477157686726, 0.00000000437118524677, 0.00000000400476901172,
    0.00000000366941733120, 0.00000000336247084026, 0.00000000308149975804, 0.00000000282428392219,
    0.00000000258879457069, 0.00000000237317771734, 0.00000000217573898063, 0.00000000199492973840,
    0.00000000182933449132, 0.00000000167765932975, 0.00000000153872140623, 0.00000000141143932598,
    0.00000000129482437403, 0.00000000118797251006, 0.00000000109005705044, 0.00000000100032199929,
    0.00000000091807594993, 0.00000000084268651975, 0.00000000077357526770, 0.00000000071021305263,
    0.00000000065211579420, 0.00000000059884060106, 0.00000000054998223434, 0.00000000050516987715,
    0.00000000046406418353 };

/**
 * @brief Precomputed values from 0 to 19.4 in 0.1 steps of the boys function order 40.
 */
constexpr std::array<double, 195> BOYS_40_VALUES { 0.01234567901234568006, 0.01119781347129320155,
    0.01015672959462047761, 0.00921248886172740603, 0.00835607820981053122, 0.00757932381697180076,
    0.00687481292096915348, 0.00623582292434750243, 0.00565625710658006209, 0.00513058632721918265,
    0.00465379616151204243, 0.00422133896203137800, 0.00382909038710560045, 0.00347330997965971744,
    0.00315060541890982643, 0.00285790010256258215, 0.00259240374909493285, 0.00235158573863530505,
    0.00213315093721305055, 0.00193501777294042892, 0.00175529835426914546, 0.00159228044002853982,
    0.00144441108869287405, 0.00131028183041086979, 0.00118861521991625975, 0.00107825264166346241,
    0.00097814325052456128, 0.00088733394225755618, 0.00080496025781573368, 0.00073023813450850950,
    0.00066245642513102063, 0.00060097011353081988, 0.00054519416174577675, 0.00049459792989158132,
    0.00044870011545812918, 0.00040706416364398568, 0.00036929410486480477, 0.00033503077965818247,
    0.00030394841491312313, 0.00027575151871263716, 0.00025017206412512839, 0.00022696693504341308,
    0.00020591560967588485, 0.00018681805956652332, 0.00016949284408090365, 0.00015377538216383165,
    0.00013951638486860545, 0.00012658043369442558, 0.00011484469116183196, 0.00010419773131961301,
    0.00009453847902247493, 0.00008577524785787643, 0.00007782486754275113, 0.00007061189246538923,
    0.00006406788382271026, 0.00005813075850593569, 0.00005274419852500515, 0.00004785711534005647,
    0.00004342316399244615, 0.00003940030240313587, 0.00003575039163735640, 0.00003243883332540985,
    0.00002943424078402095, 0.00002670814070418889, 0.00002423470256309975, 0.00002199049318211913,
    0.00001995425409273028, 0.00001810669958979981, 0.00001643033354882616, 0.00001490928326273857,
    0.00001352914871607365, 0.00001227686586151813, 0.00001114058259727175, 0.00001010954626472976,
    0.00000917400159576852, 0.00000832509813848477, 0.00000755480628054391, 0.00000685584107119567,
    0.00000622159311729786, 0.00000564606589606385, 0.00000512381888835268, 0.00000464991599174540,
    0.00000421987872291680, 0.00000382964376440430, 0.00000347552445222735, 0.00000315417583831747,
    0.00000286256299573703, 0.00000259793226551956, 0.00000235778517195366, 0.00000213985475851104,
    0.00000194208411964935, 0.00000176260692460040, 0.00000159972974819778, 0.00000145191604097940,
    0.00000131777158638459, 0.00000119603130700145, 0.00000108554729464221, 0.00000098527795065463,
    0.00000089427813342724, 0.00000081169021961540, 0.00000073673599429527, 0.00000066870929312601,
    0.00000060696932674373, 0.00000055093462408709, 0.00000050007753723343, 0.00000045391925565328,
    0.00000041202528262776, 0.00000037400133095907, 0.00000033948959908389, 0.00000030816539230841,
    0.00000027973405715855, 0.00000025392819980870, 0.00000023050516224694, 0.00000020924473227892,
    0.00000018994706568977, 0.00000017243080089511, 0.00000015653134823648, 0.00000014209933773248,
    0.00000012899921059788, 0.00000011710794120593, 0.00000010631387740435, 0.00000009651568821724,
    0.00000008762140898146, 0.00000007954757489008, 0.00000007221843475092, 0.00000006556523752904,
    0.00000005952558493044, 0.00000005404284390934, 0.00000004906561354907, 0.00000004454724127724,
    0.00000004044538385433, 0.00000003672160897863, 0.00000003334103375445, 0.00000003027199660719,
    0.00000002748575954907, 0.00000002495623798561, 0.00000002265975551344, 0.00000002057482139604,
    0.00000001868192861842, 0.00000001696337061607, 0.00000001540307494992, 0.00000001398645235949,
    0.00000001270025977074, 0.00000001153247596796, 0.00000001047218875785, 0.00000000950949256275,
    0.00000000863539547765, 0.00000000784173491759, 0.00000000712110105812, 0.00000000646676735035,
    0.00000000587262745543, 0.00000000533313800507, 0.00000000484326664947, 0.00000000439844490367,
    0.00000000399452534903, 0.00000000362774278701, 0.00000000329467897996, 0.00000000299223064775,
    0.00000000271758041883, 0.00000000246817046486, 0.00000000224167856036, 0.00000000203599636935,
    0.00000000184920971881, 0.00000000167958070099, 0.00000000152553142567, 0.00000000138562927148,
    0.00000000125857349784, 0.00000000114318309208, 0.00000000103838573746, 0.00000000094320779871,
    0.00000000085676523108, 0.00000000077825532792, 0.00000000070694922891, 0.00000000064218511923,
    0.00000000058336205553, 0.00000000052993436115, 0.00000000048140653782, 0.00000000043732864644,
    0.00000000039729211791, 0.00000000036092592761, 0.00000000032789316687, 0.00000000029788788622,
    0.00000000027063225079, 0.00000000024587395439, 0.00000000022338387080, 0.00000000020295392179,
    0.00000000018439514135, 0.00000000016753591815, 0.00000000015222039985, 0.00000000013830704421,
    0.00000000012566730360, 0.00000000011418443728, 0.00000000010375239977, 0.00000000009427489728,
    0.00000000008566446577 };

/**
 * @brief The boys function of order n.
 *
 * @tparam FLOAT The floating point type to use.
 * @param n The order of the function.
 * @param x The x coordinate to evaluate the function at.
 * @return Value of the boys function.
 */
template <typename FLOAT = double> FLOAT boys(const int n, const FLOAT x)
{
    assert(n >= 0);
    assert(x >= 0);

    if (n == 0 and x == 0)
        return 1;

    constexpr FLOAT pi = 3.141592653589793;
    if (n == 0)
        return std::sqrt(pi / (4 * x)) * std::erf(std::sqrt(x));

    FLOAT val;

    if (x <= 0.001) {
        val = 0;
        for (int k = 0; k <= 24; k++)
            val += std::pow(-x, k) / (std::tgamma(k + 1) * (2 * n + 2 * k + 1));
    } else if (x <= 19.4) {
        FLOAT rx = 0.1 * round(x * 10.0);
        FLOAT dx = x - rx;
        FLOAT precomputed = BOYS_20_VALUES[round(x * 10.0)];

        val = 0;
        for (int k = 0; k <= 8; k++)
            val += boys(n + k, rx, 20, precomputed) * std::pow(-dx, k) / std::tgamma(k + 1);
    } else {
        // Boys for large x (> 19.4):
        FLOAT semiFactorial = 1;
        for (int i = 2 * n - 1; i > 0; i -= 2)
            semiFactorial *= i;

        val = std::sqrt(pi / std::pow(x, 2 * n + 1)) * semiFactorial / std::pow(2, n + 1);
    }

    return val;
}

}